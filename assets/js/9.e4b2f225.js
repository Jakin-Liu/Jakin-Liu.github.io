(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{554:function(a,t,s){"use strict";s.r(t);var n=s(2),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("p",[a._v("本篇博客主要是对 Javcscript 的闭包进行解释")]),a._v(" "),s("h4",{attrs:{id:"什么是闭包？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是闭包？"}},[a._v("#")]),a._v(" 什么是闭包？")]),a._v(" "),s("p",[a._v("这里举个通俗易懂的例子，你有一本书，然后你把这本书放在书包里面，把书包的拉链拉起来，这里关闭的书包就相当于是Javascript的闭包。存放在书包里面的书本，我们什么时候想要查看只需要打开书包就可以拿来看了。")]),a._v(" "),s("h4",{attrs:{id:"什么时候我们需要到闭包呢？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么时候我们需要到闭包呢？"}},[a._v("#")]),a._v(" 什么时候我们需要到闭包呢？")]),a._v(" "),s("p",[a._v("首先我们先看一段代码1：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('function books () {\n\tvar book = "书包里面的书本"\n}\nconsole.log(book)\n')])])]),s("p",[a._v("很明显，这段代码肯定是不行的，写代码我们都知道这样写是不行的，但是很多人都不知道为什么不行？下面我们就通过执行上下文来解释为什么不行？")]),a._v(" "),s("h4",{attrs:{id:"执行上下文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文"}},[a._v("#")]),a._v(" 执行上下文")]),a._v(" "),s("p",[a._v("每当我们运行代码时都会产生一个执行上下文，大家可以把执行上下文理解为执行环境，这个执行环境相当于代码的作用域，给代码划清界限。")]),a._v(" "),s("p",[a._v("执行环境一般会有全局环境、函数环境和Eval环境（慎用），Eval 环境是要谨慎使用的，这里我们不做讨论。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("function a() {\n\tb()\n\tfunction b() {\n\t\tc()\n\t\tfunction c() {\n\t\t\tconsole.log('我在里面')\n\t\t}\n\t}\n}\na();\n")])])]),s("p",[a._v("上面示范了一段嵌套函数代码2，这段代码发生的事情如下：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("步骤一：当浏览器初次执行代码时，创建了一个全局函数a，进入全局执行上下文\n步骤二：执行函数a，此时会创建函数a执行上下文\n步骤三：执行函数b，此时会创建函数b的执行上下文\n步骤四：执行函数c，此时会创建函数c的执行上下文，接着需要在控制台输出\n")])])]),s("p",[a._v("这里面我们要知道Javascript是一个单线程的，执行的时候只能做一件事情，跟你把东西放进一个瓶子里很相似，先进后出，也就是栈stack。")]),a._v(" "),s("p",[a._v("现在我们回去看示范代码1就很容易理解为什么代码不能执行了？\n示范1代码声明了函数books，但是并没有执行函数books，因此我们并没有进入到books的函数执行上下文里面，而是在全局执行上下文里面执行要求输出函数里面的book变量，但是在全局里面根本就没有book这个变量，因此从执行上下文里面就可以简单解释这段代码为什么不行。")]),a._v(" "),s("p",[a._v("执行上下文可以分为创建阶段和执行阶段两大步骤。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("创建阶段：\n我们在调用代码之前还没有执行代码前也就是创建阶段，执行上下文会创建作用域链、变量对象和this。\n作用域链：当前变量对象、所有父级变量对象\n变量对象：参数、变量、函数声明\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("执行阶段：执行函数里面的每一行代码，会进行变量赋值、函数引用等动作。\n")])])]),s("p",[a._v("要理解闭包，我们要理解作用域链，我们通过一段代码来看看作用域链和闭包。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("function books () {\n\tvar book = '书包里面的书本'\n\treturn function () {\n\t\tconsole.log(book)\n\t}\n}\nvar bag = books()\nbag()\n解释：\n1、全局执行上下文 = { 作用域链: { 全局变量对象}, {变量对象: books, bag} } 。这里面我们可以知道bag 指向了books函数，全局执行了books 函数，因此我们要进入到books函数的执行上下文。\n2、books执行上下文 = { 作用域链: {books 变量对象 + 全局变量对象}， {变量对象: book} }\n3、匿名函数执行上下文 = { 作用域链: {匿名函数变量对象 + books 变量对象 + 全局变量对象 }, 变量对象: '' }\n也就是说 匿名函数执行上下文 里面没有创建变量对象会从父级的变量对象获取，因此输出了书包里面的书本，通常我们需要获取匿名函数里面的book变量会在匿名函数里面返回book 变量，因此我们就可以在全局上下文里面获取book变量值\n")])])]),s("h4",{attrs:{id:"经典面试题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#经典面试题"}},[a._v("#")]),a._v(" 经典面试题")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("for (var i = 0; i < 5; i++) {\n\tsetTimeout(function () {\n\t\tconsole.log(i++)  // 5, 6, 7, 8, 9\n\t}, 4000)\n} \nconsole.log(i)  // 5\n")])])]),s("p",[a._v("这道题不仅考核Javascript 里面的闭包，还考核了Javascript里面的事件循环机制。\nJavascript 里面有任务队列的概念，只要你使用了 setTimeout 即使你设置了0毫秒也是不会马上执行的，而是由浏览器处理完得到一个结果后才会进入到任务队列中的，等待timeout 时间后开始执行任务队列中任务。")]),a._v(" "),s("h4",{attrs:{id:"实际任务队列中的结果如下"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实际任务队列中的结果如下"}},[a._v("#")]),a._v(" 实际任务队列中的结果如下 :")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("[i++, i++, i++, i++, i++]\n")])])]),s("p",[a._v("实际上i是在原来的基础上 继续去做执行的结果。")])])}),[],!1,null,null,null);t.default=e.exports}}]);